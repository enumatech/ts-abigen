public {{this.tsName}} = {
    async sendTransaction(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: Partial<TxDataPayable> = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    ): Promise<string> {
        const self = this as any as {{contractName}}Contract;
        const inputAbi = self._lookupAbi('{{this.functionSignature}}').inputs;
        [{{> params inputs=inputs}}] = BaseContract._formatABIDataItemList(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString.bind(self));
        BaseContract.strictArgumentEncodingCheck(inputAbi, [{{> params inputs=inputs}}]);
        const encodedData = self._lookupEthersInterface('{{this.functionSignature}}').functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data;
        const txDataWithDefaults = await BaseContract._applyDefaultsToTxData(
            {
                to: self.address,
                ...txData,
                data: encodedData,
            },
            self._web3Wrapper.getContractDefaults(),
            self.{{this.tsName}}.estimateGas.bind(
                self,
                {{> params inputs=inputs}}
            ),
        );
        const txHash = await self._web3Wrapper.sendTransaction(txDataWithDefaults);
        return txHash;
    },
    async estimateGas(
    {{> typed_params inputs=inputs}}
        txData: Partial<TxData> = {},
    ): Promise<number> {
        const self = this as any as {{contractName}}Contract;
        const inputAbi = self._lookupAbi('{{this.functionSignature}}').inputs;
        [{{> params inputs=inputs}}] = BaseContract._formatABIDataItemList(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString);
        const encodedData = self._lookupEthersInterface('{{this.functionSignature}}').functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data;
        const txDataWithDefaults = await BaseContract._applyDefaultsToTxData(
            {
                to: self.address,
                ...txData,
                data: encodedData,
            },
            self._web3Wrapper.getContractDefaults(),
        );
        const gas = await self._web3Wrapper.estimateGas(txDataWithDefaults);
        return gas;
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        const self = this as any as {{contractName}}Contract;
        const inputAbi = self._lookupAbi('{{this.functionSignature}}').inputs;
        [{{> params inputs=inputs}}] = BaseContract._formatABIDataItemList(inputAbi, [{{> params inputs=inputs}}], BaseContract._bigNumberToString);
        const abiEncodedTransactionData = self._lookupEthersInterface('{{this.functionSignature}}').functions.{{this.name}}(
            {{> params inputs=inputs}}
        ).data;
        return abiEncodedTransactionData;
    },
    {{> call}}
};
