* ts-abigen - Convert solc contract output to typescript interfaces

** Usage
First compile your contract
#+begin_src shell
solc --combined-json=abi,bin --optimize contract.sol > combined.json
#+end_src

Then convert contracts to typescript
#+begin_src shell
./bin/ts-abigen.js --out ./local_modules/test-contract --name test-contract --combined combined.json
#+end_src

Using your contract
#+begin_src typescript
import {
    RPCSubprovider,
    Web3ProviderEngine,
} from 'sane-subproviders'  // This is an enuma fork of the 0xprojects subproviders with less cruft
import { Web3Wrapper } from '@0xproject/web3-wrapper';

// Change this to match your contract
import { ExampleContract } from './local_modules/test-contract'

const provider = new Web3ProviderEngine()
provider.addProvider(new RPCSubprovider('http://localhost:8545'))
provider.start()

const w3 = new Web3Wrapper(provider)

const contract = new ExampleContract(
    '0x48624beaad14ea386e2185839aa10c1faf6b973a',
    w3.getProvider(),
    w3.getContractDefaults())

Promise.resolve()
    .then(async () => {
        const z = '0x0000000000000000000000000000000000000000000000000000000000000000'
        const result = await contract.sanityCheck.callAsync(z, z)
       console.log(result)
    })
    .then(_ => {
        process.exit(0)
    })
    .catch(err => {
        console.error(err)
        process.exit(1)
    })
#+end_src
